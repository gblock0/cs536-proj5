
//----------------------------------------------------
// The following code was generated by CUP v0.10f
// Tue Dec 10 13:44:39 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {7, 5},     {8, 2},     {8, 1},     {11, 2}, 
        {11, 0},     {10, 2},     {10, 0},     {14, 1},     {14, 0}, 
        {13, 9},     {13, 9},     {13, 10},     {13, 10},     {2, 3}, 
        {2, 1},     {12, 2},     {12, 4},     {9, 3},     {9, 5}, 
        {9, 6},     {9, 5},     {3, 2},     {3, 0},     {4, 5}, 
        {4, 7},     {4, 7},     {4, 5},     {4, 1},     {5, 7}, 
        {5, 7},     {5, 5},     {5, 1},     {6, 4},     {6, 3}, 
        {6, 3},     {6, 5},     {6, 5},     {6, 4},     {6, 5}, 
        {6, 2},     {6, 3},     {6, 3},     {6, 3},     {6, 5}, 
        {1, 1},     {1, 1},     {1, 1},     {19, 3},     {19, 1}, 
        {17, 3},     {17, 1},     {18, 3},     {18, 1},     {15, 3}, 
        {15, 3},     {15, 1},     {20, 3},     {20, 3},     {20, 3}, 
        {20, 3},     {20, 3},     {20, 3},     {20, 1},     {21, 3}, 
        {21, 3},     {21, 1},     {22, 3},     {22, 3},     {22, 1}, 
        {23, 2},     {23, 4},     {23, 1},     {24, 1},     {24, 3}, 
        {24, 4},     {24, 1},     {24, 1},     {24, 1},     {24, 1}, 
        {24, 1},     {24, 3},     {16, 1},     {16, 4},     {25, 1}, 
        {26, 1}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{32,3,-1,0},
    /*1*/{0,220,-1,0},
    /*2*/{2,4,-1,0},
    /*3*/{3,-85,4,-85,5,-85,6,-85,7,-85,8,-85,13,-85,14,-85,15,-85,16,-85,17,-85,18,-85,19,-85,20,-85,21,-85,22,-85,23,-85,24,-85,25,-85,27,-85,28,-85,29,-85,30,-85,-1,0},
    /*4*/{8,6,-1,0},
    /*5*/{9,-8,31,14,33,8,38,16,39,7,40,11,-1,0},
    /*6*/{2,-47,5,-47,-1,0},
    /*7*/{2,4,-1,0},
    /*8*/{9,-8,31,14,38,16,39,7,40,11,-1,0},
    /*9*/{9,212,-1,0},
    /*10*/{2,-48,5,-48,-1,0},
    /*11*/{9,-8,31,14,33,8,38,16,39,7,40,11,-1,0},
    /*12*/{9,-4,-1,0},
    /*13*/{2,4,-1,0},
    /*14*/{2,4,-1,0},
    /*15*/{2,-46,5,-46,-1,0},
    /*16*/{3,18,4,19,7,21,13,20,-1,0},
    /*17*/{2,-19,8,-19,9,-19,31,-19,33,-19,34,-19,35,-19,37,-19,38,-19,39,-19,40,-19,41,-19,42,-19,43,-19,44,-19,-1,0},
    /*18*/{5,83,38,16,39,7,40,11,-1,0},
    /*19*/{10,24,-1,0},
    /*20*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*21*/{3,-74,5,-74,6,-74,14,-74,15,-74,16,-74,17,-74,18,-74,19,-74,20,-74,21,-74,22,-74,23,-74,25,-74,27,-74,28,-74,-1,0},
    /*22*/{3,-67,5,-67,6,-67,14,-67,15,-67,16,-67,17,-67,18,-67,19,-67,20,-67,21,-67,22,-67,23,59,25,58,27,-67,28,-67,-1,0},
    /*23*/{3,-86,5,-86,6,-86,14,-86,15,-86,16,-86,17,-86,18,-86,19,-86,20,-86,21,-86,22,-86,23,-86,25,-86,27,-86,28,-86,-1,0},
    /*24*/{3,-70,5,-70,6,-70,14,-70,15,-70,16,-70,17,-70,18,-70,19,-70,20,-70,21,-70,22,-70,23,-70,25,-70,27,-70,28,-70,-1,0},
    /*25*/{3,-57,5,-57,6,-57,14,-57,15,-57,16,-57,-1,0},
    /*26*/{3,-79,5,-79,6,-79,14,-79,15,-79,16,-79,17,-79,18,-79,19,-79,20,-79,21,-79,22,-79,23,-79,25,-79,27,-79,28,-79,-1,0},
    /*27*/{3,-80,5,-80,6,-80,14,-80,15,-80,16,-80,17,-80,18,-80,19,-80,20,-80,21,-80,22,-80,23,-80,25,-80,27,-80,28,-80,-1,0},
    /*28*/{3,-83,4,69,5,-83,6,-83,13,70,14,-83,15,-83,16,-83,17,-83,18,-83,19,-83,20,-83,21,-83,22,-83,23,-83,25,-83,27,-83,28,-83,-1,0},
    /*29*/{3,-81,5,-81,6,-81,14,-81,15,-81,16,-81,17,-81,18,-81,19,-81,20,-81,21,-81,22,-81,23,-81,25,-81,27,-81,28,-81,-1,0},
    /*30*/{3,-64,5,-64,6,-64,14,-64,15,-64,16,-64,17,50,18,51,19,49,20,55,21,54,22,52,27,53,28,56,-1,0},
    /*31*/{3,-77,5,-77,6,-77,14,-77,15,-77,16,-77,17,-77,18,-77,19,-77,20,-77,21,-77,22,-77,23,-77,25,-77,27,-77,28,-77,-1,0},
    /*32*/{3,-78,5,-78,6,-78,14,-78,15,-78,16,-78,17,-78,18,-78,19,-78,20,-78,21,-78,22,-78,23,-78,25,-78,27,-78,28,-78,-1,0},
    /*33*/{3,48,15,42,16,44,-1,0},
    /*34*/{3,-73,5,-73,6,-73,14,-73,15,-73,16,-73,17,-73,18,-73,19,-73,20,-73,21,-73,22,-73,23,-73,25,-73,27,-73,28,-73,-1,0},
    /*35*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*36*/{2,4,4,37,10,24,11,27,12,33,26,36,38,16,39,7,40,11,45,28,46,30,-1,0},
    /*37*/{5,43,15,42,16,44,-1,0},
    /*38*/{5,40,-1,0},
    /*39*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*40*/{3,-72,5,-72,6,-72,14,-72,15,-72,16,-72,17,-72,18,-72,19,-72,20,-72,21,-72,22,-72,23,-72,25,-72,27,-72,28,-72,-1,0},
    /*41*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*42*/{3,-82,5,-82,6,-82,14,-82,15,-82,16,-82,17,-82,18,-82,19,-82,20,-82,21,-82,22,-82,23,-82,25,-82,27,-82,28,-82,-1,0},
    /*43*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*44*/{3,-55,5,-55,6,-55,14,-55,15,-55,16,-55,-1,0},
    /*45*/{3,-56,5,-56,6,-56,14,-56,15,-56,16,-56,-1,0},
    /*46*/{3,-71,5,-71,6,-71,14,-71,15,-71,16,-71,17,-71,18,-71,19,-71,20,-71,21,-71,22,-71,23,-71,25,-71,27,-71,28,-71,-1,0},
    /*47*/{2,-20,8,-20,9,-20,31,-20,33,-20,34,-20,35,-20,37,-20,38,-20,39,-20,40,-20,41,-20,42,-20,43,-20,44,-20,-1,0},
    /*48*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*49*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*50*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*51*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*52*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*53*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*54*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*55*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*56*/{3,-66,5,-66,6,-66,14,-66,15,-66,16,-66,17,-66,18,-66,19,-66,20,-66,21,-66,22,-66,23,59,25,58,27,-66,28,-66,-1,0},
    /*57*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*58*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*59*/{3,-68,5,-68,6,-68,14,-68,15,-68,16,-68,17,-68,18,-68,19,-68,20,-68,21,-68,22,-68,23,-68,25,-68,27,-68,28,-68,-1,0},
    /*60*/{3,-69,5,-69,6,-69,14,-69,15,-69,16,-69,17,-69,18,-69,19,-69,20,-69,21,-69,22,-69,23,-69,25,-69,27,-69,28,-69,-1,0},
    /*61*/{3,-63,5,-63,6,-63,14,-63,15,-63,16,-63,27,53,28,56,-1,0},
    /*62*/{3,-60,5,-60,6,-60,14,-60,15,-60,16,-60,27,53,28,56,-1,0},
    /*63*/{3,-65,5,-65,6,-65,14,-65,15,-65,16,-65,17,-65,18,-65,19,-65,20,-65,21,-65,22,-65,23,59,25,58,27,-65,28,-65,-1,0},
    /*64*/{3,-61,5,-61,6,-61,14,-61,15,-61,16,-61,27,53,28,56,-1,0},
    /*65*/{3,-59,5,-59,6,-59,14,-59,15,-59,16,-59,27,53,28,56,-1,0},
    /*66*/{3,-58,5,-58,6,-58,14,-58,15,-58,16,-58,27,53,28,56,-1,0},
    /*67*/{3,-62,5,-62,6,-62,14,-62,15,-62,16,-62,27,53,28,56,-1,0},
    /*68*/{2,4,4,37,5,75,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*69*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*70*/{14,72,15,42,16,44,-1,0},
    /*71*/{3,-84,5,-84,6,-84,7,-84,14,-84,15,-84,16,-84,17,-84,18,-84,19,-84,20,-84,21,-84,22,-84,23,-84,25,-84,27,-84,28,-84,29,-84,30,-84,-1,0},
    /*72*/{5,-50,6,77,15,42,16,44,-1,0},
    /*73*/{5,76,-1,0},
    /*74*/{3,-75,5,-75,6,-75,14,-75,15,-75,16,-75,17,-75,18,-75,19,-75,20,-75,21,-75,22,-75,23,-75,25,-75,27,-75,28,-75,-1,0},
    /*75*/{3,-76,5,-76,6,-76,14,-76,15,-76,16,-76,17,-76,18,-76,19,-76,20,-76,21,-76,22,-76,23,-76,25,-76,27,-76,28,-76,-1,0},
    /*76*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*77*/{5,-49,-1,0},
    /*78*/{14,80,-1,0},
    /*79*/{3,81,-1,0},
    /*80*/{2,-21,8,-21,9,-21,31,-21,33,-21,34,-21,35,-21,37,-21,38,-21,39,-21,40,-21,41,-21,42,-21,43,-21,44,-21,-1,0},
    /*81*/{5,-16,6,194,-1,0},
    /*82*/{8,189,-1,0},
    /*83*/{2,4,-1,0},
    /*84*/{5,86,-1,0},
    /*85*/{8,87,-1,0},
    /*86*/{2,-6,8,-6,9,-6,33,8,34,-6,35,-6,37,-6,38,16,39,7,40,11,41,-6,42,-6,43,-6,44,-6,-1,0},
    /*87*/{2,-6,8,-6,9,-6,33,8,34,-6,35,-6,37,-6,38,16,39,7,40,11,41,-6,42,-6,43,-6,44,-6,-1,0},
    /*88*/{2,4,-1,0},
    /*89*/{2,4,8,93,9,-24,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*90*/{2,-29,8,-29,9,-29,34,-29,35,-29,37,-29,41,-29,42,-29,43,-29,44,-29,-1,0},
    /*91*/{2,4,-1,0},
    /*92*/{2,-6,8,-6,9,-6,33,8,34,-6,35,-6,37,-6,38,16,39,7,40,11,41,-6,42,-6,43,-6,44,-6,-1,0},
    /*93*/{4,170,-1,0},
    /*94*/{7,165,29,164,30,163,-1,0},
    /*95*/{9,160,-1,0},
    /*96*/{2,4,8,93,9,-24,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*97*/{4,132,-1,0},
    /*98*/{2,4,3,130,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*99*/{4,125,-1,0},
    /*100*/{4,114,7,-83,13,70,24,113,29,-83,30,-83,-1,0},
    /*101*/{4,106,-1,0},
    /*102*/{2,4,-1,0},
    /*103*/{3,105,-1,0},
    /*104*/{2,-44,8,-44,9,-44,34,-44,35,-44,36,-44,37,-44,41,-44,42,-44,43,-44,44,-44,-1,0},
    /*105*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*106*/{5,-54,6,111,15,42,16,44,-1,0},
    /*107*/{5,109,-1,0},
    /*108*/{3,110,-1,0},
    /*109*/{2,-38,8,-38,9,-38,34,-38,35,-38,36,-38,37,-38,41,-38,42,-38,43,-38,44,-38,-1,0},
    /*110*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*111*/{5,-53,-1,0},
    /*112*/{35,120,-1,0},
    /*113*/{2,4,4,37,5,116,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*114*/{5,118,-1,0},
    /*115*/{3,117,-1,0},
    /*116*/{2,-39,8,-39,9,-39,34,-39,35,-39,36,-39,37,-39,41,-39,42,-39,43,-39,44,-39,-1,0},
    /*117*/{3,119,-1,0},
    /*118*/{2,-40,8,-40,9,-40,34,-40,35,-40,36,-40,37,-40,41,-40,42,-40,43,-40,44,-40,-1,0},
    /*119*/{4,121,-1,0},
    /*120*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*121*/{5,123,15,42,16,44,-1,0},
    /*122*/{2,4,8,93,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*123*/{2,-27,8,-27,9,-27,34,-27,35,-27,37,-27,41,-27,42,-27,43,-27,44,-27,-1,0},
    /*124*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*125*/{5,127,15,42,16,44,-1,0},
    /*126*/{2,4,8,93,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*127*/{2,-28,8,-28,9,-28,34,-28,35,-28,37,-28,41,-28,42,-28,43,-28,44,-28,-1,0},
    /*128*/{3,131,15,42,16,44,-1,0},
    /*129*/{2,-41,8,-41,9,-41,34,-41,35,-41,36,-41,37,-41,41,-41,42,-41,43,-41,44,-41,-1,0},
    /*130*/{2,-42,8,-42,9,-42,34,-42,35,-42,36,-42,37,-42,41,-42,42,-42,43,-42,44,-42,-1,0},
    /*131*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*132*/{5,134,15,42,16,44,-1,0},
    /*133*/{2,4,8,93,34,137,35,139,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*134*/{2,-29,8,-29,9,-29,34,-29,35,-29,36,-33,37,-29,41,-29,42,-29,43,-29,44,-29,-1,0},
    /*135*/{2,-25,8,-25,9,-25,34,-25,35,-25,37,-25,41,-25,42,-25,43,-25,44,-25,-1,0},
    /*136*/{4,153,-1,0},
    /*137*/{4,114,7,-83,13,70,24,147,29,-83,30,-83,-1,0},
    /*138*/{4,143,-1,0},
    /*139*/{36,141,-1,0},
    /*140*/{2,4,8,93,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*141*/{2,-26,8,-26,9,-26,34,-26,35,-26,37,-26,41,-26,42,-26,43,-26,44,-26,-1,0},
    /*142*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*143*/{5,145,15,42,16,44,-1,0},
    /*144*/{2,4,8,93,34,137,35,139,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*145*/{36,-32,-1,0},
    /*146*/{35,148,-1,0},
    /*147*/{4,149,-1,0},
    /*148*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*149*/{5,151,15,42,16,44,-1,0},
    /*150*/{2,4,8,93,34,137,35,139,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*151*/{36,-31,-1,0},
    /*152*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*153*/{5,155,15,42,16,44,-1,0},
    /*154*/{2,4,8,93,34,137,35,139,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*155*/{36,157,-1,0},
    /*156*/{2,4,8,93,34,137,35,139,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*157*/{36,-30,-1,0},
    /*158*/{9,-23,-1,0},
    /*159*/{3,162,9,-10,31,-10,38,-10,39,-10,40,-10,-1,0},
    /*160*/{9,-13,31,-13,38,-13,39,-13,40,-13,-1,0},
    /*161*/{2,-9,8,-9,9,-9,31,-9,34,-9,35,-9,36,-9,37,-9,38,-9,39,-9,40,-9,41,-9,42,-9,43,-9,44,-9,-1,0},
    /*162*/{3,169,-1,0},
    /*163*/{3,168,-1,0},
    /*164*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*165*/{3,167,15,42,16,44,-1,0},
    /*166*/{2,-34,8,-34,9,-34,34,-34,35,-34,36,-34,37,-34,41,-34,42,-34,43,-34,44,-34,-1,0},
    /*167*/{2,-35,8,-35,9,-35,34,-35,35,-35,36,-35,37,-35,41,-35,42,-35,43,-35,44,-35,-1,0},
    /*168*/{2,-36,8,-36,9,-36,34,-36,35,-36,36,-36,37,-36,41,-36,42,-36,43,-36,44,-36,-1,0},
    /*169*/{2,4,-1,0},
    /*170*/{5,-52,6,176,-1,0},
    /*171*/{5,174,-1,0},
    /*172*/{5,-83,6,-83,13,70,-1,0},
    /*173*/{3,175,-1,0},
    /*174*/{2,-37,8,-37,9,-37,34,-37,35,-37,36,-37,37,-37,41,-37,42,-37,43,-37,44,-37,-1,0},
    /*175*/{2,4,-1,0},
    /*176*/{5,-51,-1,0},
    /*177*/{2,4,8,93,9,-24,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*178*/{9,180,-1,0},
    /*179*/{2,-10,3,162,8,-10,9,-10,34,-10,35,-10,36,-10,37,-10,41,-10,42,-10,43,-10,44,-10,-1,0},
    /*180*/{2,-45,8,-45,9,-45,34,-45,35,-45,36,-45,37,-45,41,-45,42,-45,43,-45,44,-45,-1,0},
    /*181*/{3,183,-1,0},
    /*182*/{2,-43,8,-43,9,-43,34,-43,35,-43,36,-43,37,-43,41,-43,42,-43,43,-43,44,-43,-1,0},
    /*183*/{3,18,7,21,13,20,-1,0},
    /*184*/{2,-5,8,-5,9,-5,34,-5,35,-5,37,-5,41,-5,42,-5,43,-5,44,-5,-1,0},
    /*185*/{5,-17,6,-17,13,187,-1,0},
    /*186*/{14,188,-1,0},
    /*187*/{5,-18,6,-18,-1,0},
    /*188*/{2,-6,8,-6,9,-6,33,8,34,-6,35,-6,37,-6,38,16,39,7,40,11,41,-6,42,-6,43,-6,44,-6,-1,0},
    /*189*/{2,4,8,93,9,-24,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*190*/{9,192,-1,0},
    /*191*/{3,162,9,-10,31,-10,38,-10,39,-10,40,-10,-1,0},
    /*192*/{9,-11,31,-11,38,-11,39,-11,40,-11,-1,0},
    /*193*/{38,16,39,7,40,11,-1,0},
    /*194*/{5,-15,-1,0},
    /*195*/{4,197,-1,0},
    /*196*/{5,198,38,16,39,7,40,11,-1,0},
    /*197*/{8,206,-1,0},
    /*198*/{5,200,-1,0},
    /*199*/{8,201,-1,0},
    /*200*/{2,-6,8,-6,9,-6,33,8,34,-6,35,-6,37,-6,38,16,39,7,40,11,41,-6,42,-6,43,-6,44,-6,-1,0},
    /*201*/{2,4,8,93,9,-24,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*202*/{9,204,-1,0},
    /*203*/{3,162,9,-10,31,-10,38,-10,39,-10,40,-10,-1,0},
    /*204*/{9,-14,31,-14,38,-14,39,-14,40,-14,-1,0},
    /*205*/{2,-6,8,-6,9,-6,33,8,34,-6,35,-6,37,-6,38,16,39,7,40,11,41,-6,42,-6,43,-6,44,-6,-1,0},
    /*206*/{2,4,8,93,9,-24,34,98,35,100,37,94,41,102,42,99,43,92,44,103,-1,0},
    /*207*/{9,209,-1,0},
    /*208*/{3,162,9,-10,31,-10,38,-10,39,-10,40,-10,-1,0},
    /*209*/{9,-12,31,-12,38,-12,39,-12,40,-12,-1,0},
    /*210*/{9,-3,-1,0},
    /*211*/{0,-2,-1,0},
    /*212*/{9,-7,-1,0},
    /*213*/{2,4,-1,0},
    /*214*/{4,19,-1,0},
    /*215*/{7,217,-1,0},
    /*216*/{2,4,4,37,10,24,11,27,12,33,26,36,45,28,46,30,-1,0},
    /*217*/{3,219,15,42,16,44,-1,0},
    /*218*/{2,-22,8,-22,9,-22,31,-22,33,-22,34,-22,35,-22,37,-22,38,-22,39,-22,40,-22,41,-22,42,-22,43,-22,44,-22,-1,0},
    /*219*/{0,-1,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{7,1,-1,-1},
    /*1*/{-1,-1},
    /*2*/{25,4,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{1,14,8,9,9,11,10,12,13,8,-1,-1},
    /*6*/{-1,-1},
    /*7*/{25,215,-1,-1},
    /*8*/{1,213,10,212,13,8,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{1,14,8,210,9,11,10,12,13,8,-1,-1},
    /*12*/{-1,-1},
    /*13*/{25,195,-1,-1},
    /*14*/{25,16,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{1,83,2,84,12,81,-1,-1},
    /*19*/{26,78,-1,-1},
    /*20*/{15,33,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{16,21,23,46,24,34,25,28,26,31,-1,-1},
    /*36*/{1,38,15,37,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{16,21,23,40,24,34,25,28,26,31,-1,-1},
    /*40*/{-1,-1},
    /*41*/{16,21,20,45,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*42*/{-1,-1},
    /*43*/{16,21,20,44,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{16,21,21,67,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*49*/{16,21,21,66,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*50*/{16,21,21,65,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*51*/{16,21,21,64,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*52*/{16,21,22,63,23,24,24,34,25,28,26,31,-1,-1},
    /*53*/{16,21,21,62,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*54*/{16,21,21,61,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*55*/{16,21,22,56,23,24,24,34,25,28,26,31,-1,-1},
    /*56*/{-1,-1},
    /*57*/{16,21,23,60,24,34,25,28,26,31,-1,-1},
    /*58*/{16,21,23,59,24,34,25,28,26,31,-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{15,72,16,21,19,73,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*69*/{15,70,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{15,72,16,21,19,77,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{25,185,-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{1,88,9,87,11,89,-1,-1},
    /*87*/{1,88,9,87,11,184,-1,-1},
    /*88*/{25,183,-1,-1},
    /*89*/{3,95,4,96,6,90,16,94,25,100,-1,-1},
    /*90*/{-1,-1},
    /*91*/{25,181,-1,-1},
    /*92*/{1,88,9,87,11,177,-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{3,158,4,96,6,90,16,94,25,100,-1,-1},
    /*97*/{-1,-1},
    /*98*/{15,128,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*99*/{-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{25,103,-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{15,106,16,21,18,107,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{15,106,16,21,18,111,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{15,72,16,21,19,114,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{15,121,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*121*/{-1,-1},
    /*122*/{4,123,6,90,16,94,25,100,-1,-1},
    /*123*/{-1,-1},
    /*124*/{15,125,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*125*/{-1,-1},
    /*126*/{4,127,6,90,16,94,25,100,-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{15,132,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*132*/{-1,-1},
    /*133*/{4,135,5,139,6,134,16,94,25,137,-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{4,141,6,90,16,94,25,100,-1,-1},
    /*141*/{-1,-1},
    /*142*/{15,143,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*143*/{-1,-1},
    /*144*/{4,127,5,145,6,134,16,94,25,137,-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{15,149,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*149*/{-1,-1},
    /*150*/{4,123,5,151,6,134,16,94,25,137,-1,-1},
    /*151*/{-1,-1},
    /*152*/{15,153,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*153*/{-1,-1},
    /*154*/{4,135,5,155,6,134,16,94,25,137,-1,-1},
    /*155*/{-1,-1},
    /*156*/{4,141,5,157,6,134,16,94,25,137,-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{14,160,-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{15,165,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*165*/{-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{-1,-1},
    /*169*/{16,170,17,171,25,172,-1,-1},
    /*170*/{-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{-1,-1},
    /*174*/{-1,-1},
    /*175*/{16,170,17,176,25,172,-1,-1},
    /*176*/{-1,-1},
    /*177*/{3,178,4,96,6,90,16,94,25,100,-1,-1},
    /*178*/{-1,-1},
    /*179*/{14,180,-1,-1},
    /*180*/{-1,-1},
    /*181*/{-1,-1},
    /*182*/{-1,-1},
    /*183*/{-1,-1},
    /*184*/{-1,-1},
    /*185*/{-1,-1},
    /*186*/{-1,-1},
    /*187*/{-1,-1},
    /*188*/{1,88,9,87,11,189,-1,-1},
    /*189*/{3,190,4,96,6,90,16,94,25,100,-1,-1},
    /*190*/{-1,-1},
    /*191*/{14,192,-1,-1},
    /*192*/{-1,-1},
    /*193*/{1,83,2,194,12,81,-1,-1},
    /*194*/{-1,-1},
    /*195*/{-1,-1},
    /*196*/{1,83,2,198,12,81,-1,-1},
    /*197*/{-1,-1},
    /*198*/{-1,-1},
    /*199*/{-1,-1},
    /*200*/{1,88,9,87,11,201,-1,-1},
    /*201*/{3,202,4,96,6,90,16,94,25,100,-1,-1},
    /*202*/{-1,-1},
    /*203*/{14,204,-1,-1},
    /*204*/{-1,-1},
    /*205*/{1,88,9,87,11,206,-1,-1},
    /*206*/{3,207,4,96,6,90,16,94,25,100,-1,-1},
    /*207*/{-1,-1},
    /*208*/{14,209,-1,-1},
    /*209*/{-1,-1},
    /*210*/{-1,-1},
    /*211*/{-1,-1},
    /*212*/{-1,-1},
    /*213*/{25,214,-1,-1},
    /*214*/{-1,-1},
    /*215*/{-1,-1},
    /*216*/{15,217,16,21,20,25,21,30,22,22,23,24,24,34,25,28,26,31,-1,-1},
    /*217*/{-1,-1},
    /*218*/{-1,-1},
    /*219*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),
			null);
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {

  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // intliteral ::= INTLIT 
            {
              intLitNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new intLitNode(i.intValue, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(26/*intliteral*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ident ::= IDENTIFIER 
            {
              identNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new identNode(i.identifierText, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(25/*ident*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // name ::= ident LBRACKET expr RBRACKET 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new nameNode(i, e, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // name ::= ident 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new nameNode(i, exprNode.NULL, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unit ::= LPAREN expr RPAREN 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = e; 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new falseNode(f.linenum,f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new trueNode(t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXStringLitToken s = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new strLitNode(s.stringText, s.linenum,s.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXCharLitToken c = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new charLitNode(c.charValue, c.linenum,c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unit ::= intliteral 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		intLitNode l = (intLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = l; 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unit ::= ident LPAREN args RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=new fctCallNode(i,a, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unit ::= ident LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=new fctCallNode(i,argsNode.NULL, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unit ::= name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = n; 
              CUP$result = new java_cup.runtime.Symbol(24/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unary ::= unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = u; 
              CUP$result = new java_cup.runtime.Symbol(23/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unary ::= LPAREN type RPAREN unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode val = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new castNode(t,val, l.linenum,l.colnum); 
              CUP$result = new java_cup.runtime.Symbol(23/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode val = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new unaryOpNode(sym.NOT, val, op.linenum,op.colnum); 
              CUP$result = new java_cup.runtime.Symbol(23/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // pri ::= unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = u; 
              CUP$result = new java_cup.runtime.Symbol(22/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // pri ::= pri SLASH unary 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.SLASH,rightval,
                                    op.linenum,op.colnum,
                                    ASTNode.Types.Integer ); 
              CUP$result = new java_cup.runtime.Symbol(22/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pri ::= pri TIMES unary 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.TIMES,rightval,
                                    op.linenum,op.colnum,
                                    ASTNode.Types.Integer );  
              CUP$result = new java_cup.runtime.Symbol(22/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = p; 
              CUP$result = new java_cup.runtime.Symbol(21/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= factor MINUS pri 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.MINUS,rightval,
                          op.linenum,op.colnum,
                          ASTNode.Types.Integer ); 
              CUP$result = new java_cup.runtime.Symbol(21/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= factor PLUS pri 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.PLUS,
				rightval,op.linenum,op.colnum,
				ASTNode.Types.Integer); 
              CUP$result = new java_cup.runtime.Symbol(21/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = f; 
              CUP$result = new java_cup.runtime.Symbol(20/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= factor NOTEQ factor 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.NOTEQ,rightval,
                                op.linenum,op.colnum,
				ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(20/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= factor EQ factor 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.EQ,rightval,
                                op.linenum,op.colnum, 
				ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(20/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= factor GEQ factor 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.GEQ,rightval,
                                op.linenum,op.colnum, 
				ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(20/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= factor LEQ factor 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.LEQ,rightval,
                                op.linenum,op.colnum,
				ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(20/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= factor GT factor 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.GT,rightval,
                                op.linenum,op.colnum, 
				ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(20/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= factor LT factor 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.LT,rightval,
                                op.linenum,op.colnum,
				ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(20/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = t; 
              CUP$result = new java_cup.runtime.Symbol(15/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr CAND term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.CAND,rightval,
                                    op.linenum,op.colnum, 
                                    ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(15/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr COR term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.COR,rightval,
                                op.linenum,op.colnum, 
				ASTNode.Types.Boolean ); 
              CUP$result = new java_cup.runtime.Symbol(15/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printlist ::= expr 
            {
              printNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new printNode(e,printNode.NULL,e.linenum, e.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(18/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // printlist ::= expr COMMA printlist 
            {
              printNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		printNodeOption l = (printNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new printNode(e,l,e.linenum, e.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(18/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // readlist ::= name 
            {
              readNodeOption RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new readNode(n,readNode.NULL,n.linenum, n.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(17/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // readlist ::= name COMMA readlist 
            {
              readNodeOption RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		readNodeOption l = (readNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new readNode(n,l,n.linenum, n.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(17/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // args ::= expr 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new argsNode(e,argsNode.NULL,e.linenum, e.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(19/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // args ::= expr COMMA args 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new argsNode(e,a,e.linenum, e.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(19/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new boolTypeNode(t.linenum, t.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(1/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new charTypeNode(t.linenum, t.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(1/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new intTypeNode(t.linenum, t.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(1/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // otherstmt ::= LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
	   RESULT=new blockNode(f,s, l.linenum, l.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // otherstmt ::= rw_CONTINUE ident SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
	   RESULT=new continueNode(i, c.linenum, c.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // otherstmt ::= rw_BREAK ident SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
	   RESULT=new breakNode(i, b.linenum,b.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // otherstmt ::= rw_RETURN expr SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
	   RESULT=new returnNode(e, r.linenum,r.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // otherstmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		
	   RESULT=new returnNode(exprNode.NULL, r.linenum,r.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // otherstmt ::= ident LPAREN args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
	   RESULT=new callNode(i,a, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // otherstmt ::= ident LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		
	   RESULT=new callNode(i,argsNode.NULL, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // otherstmt ::= rw_PRINT LPAREN printlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		printNodeOption w = (printNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = w; 
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // otherstmt ::= rw_READ LPAREN readlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		readNodeOption r = (readNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = r; 
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // otherstmt ::= name DECREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new decrementNode(n,n.linenum,n.colnum);
	 
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // otherstmt ::= name INCREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new incrementNode(n,n.linenum,n.colnum);
	 
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // otherstmt ::= name ASG expr SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=
		new asgNode(n,e,n.linenum,n.colnum);
	 
              CUP$result = new java_cup.runtime.Symbol(6/*otherstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // closedstmt ::= otherstmt 
            {
              stmtNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = s; 
              CUP$result = new java_cup.runtime.Symbol(5/*closedstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // closedstmt ::= rw_WHILE LPAREN expr RPAREN closedstmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new whileNode(identNode.NULL,e,s, w.linenum,w.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(5/*closedstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // closedstmt ::= ident COLON rw_WHILE LPAREN expr RPAREN closedstmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new whileNode(i,e,s, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(5/*closedstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // closedstmt ::= rw_IF LPAREN expr RPAREN closedstmt rw_ELSE closedstmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtNode th = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode el = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new ifThenNode(e,th,el, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(5/*closedstmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= otherstmt 
            {
              stmtNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = s; 
              CUP$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new whileNode(identNode.NULL,e,s, w.linenum,w.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= ident COLON rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new whileNode(i,e,s, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= rw_IF LPAREN expr RPAREN closedstmt rw_ELSE stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtNode th = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode el = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new ifThenNode(e,th,el, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= rw_IF LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	   RESULT=new ifThenNode(e,s,stmtNode.NULL, i.linenum,i.colnum);
         
              CUP$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= 
            {
              stmtsOption RESULT = null;
		 RESULT= stmtsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(3/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmts ::= stmt stmts 
            {
              stmtsOption RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtsOption s2 = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
		new stmtsNode(s1,s2,s1.linenum,s1.colnum);
	  
              CUP$result = new java_cup.runtime.Symbol(3/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fielddecl ::= rw_CONST ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=
		new constDeclNode(i, e, c.linenum,c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fielddecl ::= type ident LBRACKET intliteral RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		intLitNode size = (intLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new arrayDeclNode(i,t,size, t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fielddecl ::= type ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=
		new varDeclNode(i,t,e, t.linenum,t.colnum);
                //System.out.println("CUP: init expr = "+e);
         
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fielddecl ::= type ident SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=
		new varDeclNode(i,t,exprNode.NULL, t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argdecl ::= type ident LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new arrayArgDeclNode(i,t, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(12/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argdecl ::= type ident 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
		new valArgDeclNode(i,t, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(12/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argdecls ::= argdecl 
            {
              argDeclsOption RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
		new argDeclsNode(a, argDeclsNode.NULL,
				 a.linenum,a.colnum); 
              CUP$result = new java_cup.runtime.Symbol(2/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argdecls ::= argdecl COMMA argdecls 
            {
              argDeclsOption RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argDeclNode a1 = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclsOption a2 = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
		new argDeclsNode(a1,a2, a1.linenum,a1.colnum); 
              CUP$result = new java_cup.runtime.Symbol(2/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methoddecl ::= rw_VOID ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new methodDeclNode(i, a,
				   new voidTypeNode(t.linenum, t.colnum),
                                   f, s, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methoddecl ::= type ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new methodDeclNode(i, a, t, f, s,
                                   t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methoddecl ::= rw_VOID ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new methodDeclNode(i, argDeclsNode.NULL,
				   new voidTypeNode(t.linenum, t.colnum),
                                   f,s, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methoddecl ::= type ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT=
		new methodDeclNode(i, argDeclsNode.NULL,
                                   t, f,s, t.linenum, t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optionalSemi ::= 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(14/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalSemi ::= SEMI 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(14/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              methodDeclsOption RESULT = null;
		 RESULT=
		methodDeclsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(10/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              methodDeclsOption RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		methodDeclNode m1 = (methodDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption m2 = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
		new methodDeclsNode(m1,m2, m1.linenum,m1.colnum); 
              CUP$result = new java_cup.runtime.Symbol(10/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= 
            {
              fieldDeclsOption RESULT = null;
		 RESULT=
		fieldDeclsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(11/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= fielddecl fielddecls 
            {
              fieldDeclsOption RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f1 = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		fieldDeclsOption f2 = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
		new fieldDeclsNode(f1,f2, f1.linenum,f1.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              memberDeclsNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption m = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
		new memberDeclsNode(
                        fieldDeclsNode.NULL, m, m.linenum,m.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              memberDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		  m.fields = new fieldDeclsNode(f,m.fields,f.linenum,f.colnum);
             m.linenum=f.linenum; m.colnum=f.colnum;
              RESULT= m; 
              CUP$result = new java_cup.runtime.Symbol(8/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= rw_CLASS ident LBRACE memberdecls RBRACE 
            {
              classNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=
		new classNode( i,m, c.linenum,c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(7/*prog*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		classNode start_val = (classNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		RESULT = start_val;
              CUP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

